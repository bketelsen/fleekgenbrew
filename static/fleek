#!/bin/bash
#

set -euo pipefail

readonly BOLD="$(tput bold 2>/dev/null || echo '')"
readonly GREY="$(tput setaf 8 2>/dev/null || echo '')"
readonly UNDERLINE="$(tput smul 2>/dev/null || echo '')"
readonly RED="$(tput setaf 1 2>/dev/null || echo '')"
readonly GREEN="$(tput setaf 2 2>/dev/null || echo '')"
readonly YELLOW="$(tput setaf 3 2>/dev/null || echo '')"
readonly BLUE="$(tput setaf 4 2>/dev/null || echo '')"
readonly MAGENTA="$(tput setaf 5 2>/dev/null || echo '')"
readonly CYAN="$(tput setaf 6 2>/dev/null || echo '')"
readonly NO_COLOR="$(tput sgr0 2>/dev/null || echo '')"
readonly CLEAR_LAST_MSG="\033[1F\033[0K"

readonly TOOL_NAME="fleekbrew"
readonly TOOL_URL="https://fleekgenbrew.fly.dev"

title() {
	local -r text="$*"
	printf "%s\n" "${BOLD}${MAGENTA}${text}${NO_COLOR}"
}

header() {
	local -r text="$*"
	printf "%s\n" "${BOLD}${text}${NO_COLOR}"
}

plain() {
	local -r text="$*"
	printf "%s\n" "${text}"
}

info() {
	local -r text="$*"
	printf "%s\n" "${BOLD}${GREY}→${NO_COLOR} ${text}"
}
warn() {
	local -r text="$*"
	printf "%s\n" "${YELLOW}! $*${NO_COLOR}"
}

error() {
	local -r text="$*"
	printf "%s\n" "${RED}✘ ${text}${NO_COLOR}" >&2
}

success() {
	local -r text="$*"
	printf "%s\n" "${GREEN}✓${NO_COLOR} ${text}"
}

start_task() {
	local -r text="$*"
	printf "%s\n" "${BOLD}${GREY}→${NO_COLOR} ${text}..."
}

end_task() {
	local -r text="$*"
	printf "${CLEAR_LAST_MSG}%s\n" "${GREEN}✓${NO_COLOR} ${text}... [DONE]"
}

fail_task() {
	local -r text="$*"
	printf "${CLEAR_LAST_MSG}%s\n" "${RED}✘ ${text}... [FAILED]${NO_COLOR}" >&2
}

confirm() {
	if [ -z "${FORCE-}" ]; then
		printf "%s " "${MAGENTA}?${NO_COLOR} $* ${BOLD}[Y/n]${NO_COLOR}"
		set +e
		read -r yn </dev/tty
		rc=$?
		set -e
		if [ $rc -ne 0 ]; then
			error "Error reading from prompt (re-run with '--yes' option if running in a script)"
			exit 1
		fi
		if [ "$yn" != "y" ] && [ "$yn" != "Y" ] && [ "$yn" != "yes" ] && [ "$yn" != "" ]; then
			error 'Aborting (please answer "yes" to continue)'
			exit 1
		fi
	fi
}

delay() {
	sleep 0.3
}

download() {
	local -r url="$1"
	local -r file="$2"
	local cmd=""

	if has curl; then
		cmd="curl --fail --silent --location --output $file $url"
	elif has wget; then
		cmd="wget --quiet --output-document=$file $url"
	elif has fetch; then
		cmd="fetch --quiet --output=$file $url"
	else
		error "No program to download files found. Please install one of: curl, wget, fetch"
		error "Exiting..."
		return 1
	fi

	if [[ ${3:-} == "--fail" ]]; then
		$cmd && return 0 || rc=$?
		error "Command failed (exit code $rc): ${BLUE}${cmd}${NO_COLOR}"
		exit $rc
	fi

	$cmd && return 0 || rc=$?
	return $rc
}

fleekdir() {
    # ensure directory exists
    start_task "Creating Fleek directory"    
	local -r fleek_dir="${XDG_CONFIG_HOME:-${HOME}/.config}/${TOOL_NAME}"
	mkdir -p "${fleek_dir}"
    end_task "Creating Fleek directory"
}

# =========
# util.sh
# =========
has() {
	command -v "$1" 1>/dev/null 2>&1
}

checkbrew() {
    local cmd=""
	if has brew; then
		cmd="brew update"
	else
		error "Brew not installed, please install Homebrew from https://brew.sh/"
		error "Exiting..."
		return 1
	fi

	$cmd && return 0 || rc=$?
	return $rc
}
brewfiles() {
    download "${TOOL_URL}/$1" $HOME/$1.tar --fail
    tar -xvf $HOME/$1.tar
    rm $HOME/$1.tar
}

bundle() {
    local -r bundle_file="$HOME/.fleek/Brewfile"
    local cmd=""

	cmd="brew bundle --file=${bundle_file}"
	$cmd && return 0 || rc=$?
	return $rc
}


updaterc() {
    echo "source $HOME/.fleek/init.sh" >> $HOME/.zshrc
    echo "source $HOME/.fleek/init.sh" >> $HOME/.bashrc
}

syncconfigs() {
	cd $HOME/.fleek/configs
	rsync --ignore-existing -r . $HOME
}
main() {
    # ensure homebrew is installed
	start_task "Checking for Homebrew"    
    checkbrew
    delay

    # create directory structure
    end_task "Checking for Homebrew"

    delay

	start_task "Downloading Fleek Config"    
    brewfiles $1
    end_task "Downloading Fleek Config"    

    delay

	start_task "Installing Fleek Tools"    
    bundle
    end_task "Installing Fleek Tools"    

    delay
	start_task "Updating RC Files"    
    updaterc 
    end_task "Updating RC Files"    
	start_task "Writing Configuration Files"    
    syncconfigs 
    end_task "Writing Configuration Files"    
	#install_flow "${version}" "${platform}"
	info "Restart your terminal or log out to start using Fleek"
}

main "$@"
